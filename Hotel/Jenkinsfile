pipeline {
    agent any

    environment {
        SONARQUBE_URL = 'http://localhost:9000' 
        SONARQUBE_CREDENTIALS = 'sqa_a5a79f4a32d13a706b505f9dd073005433da41e6'
        SONARQUBE_PROJECT_KEY = 'ARQ-PROJECT'
        SONARQUBE_PROJECT_NAME = 'ARQ PROJECT'
        SONARQUBE_PROJECT_VERSION = '1.0'
        MAVEN_HOME = tool 'Default Maven'
    }

    stages {


        stage('Checkout') {
            steps {
                git branch: "${env.BRANCH_NAME}", url: 'https://github.com/PM-Organization/ARQ.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${MAVEN_HOME}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} -Dsonar.projectName=${SONARQUBE_PROJECT_NAME} -Dsonar.projectVersion=${SONARQUBE_PROJECT_VERSION} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_CREDENTIALS}"
                }
            }
        }

        stage('Unit Testing') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn test"
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        
        stage('Smoke Testing') {
            when {
                branch 'dev'
            }
            steps {
                echo 'Running Smoke Tests...'
            }
        }

        stage('Deploy to Dev') {
            when {
                branch 'dev'
            }
            steps {
                sh 'docker-compose up -d db backend-dev frontend-dev'
            }
        }

        stage('Automated QA') {
            when {
                branch 'uat'
            }
            steps {
                echo 'Running Automated QA Tests...'
            }
        }

        stage('Deploy to UAT') {
            when {
                branch 'uat'
            }
            steps {
                sh 'docker-compose up -d db backend-uat frontend-uat'
            }
        }

        stage('QA') {
            when {
                branch 'main'
            }
            steps {
                echo 'Running QA Tests...'
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                sh 'docker-compose up -d db backend-main frontend-main'
            }
        }
    }

    post {
        failure {
            mail to: 'pdmorales@unis.edu.gt',
                 subject: "Build Failed: ${env.BUILD_TAG}",
                 body: "Something is wrong with the build ${env.BUILD_URL}"
        }

        success {
            echo 'Pipeline completed successfully.'
        }
    }
}
